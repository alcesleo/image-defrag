{"version":3,"sources":["App.tsx","index.tsx"],"names":["readImageFileToBase64","file","a","type","match","Error","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","event","target","result","onerror","onabort","loadImage","src","image","Image","base64ToImageData","base64Image","canvas","document","createElement","width","height","context","getContext","drawImage","getImageData","imageDataToBase64","imageData","putImageData","toDataURL","defragmentImageData","rgba","data","pixels","console","log","index","length","push","sort","b","ar","ag","ab","aa","br","bg","bb","ba","defragRgba","Uint8ClampedArray","flat","ImageData","defragmentBase64","defrag","App","useState","originalImage","setOriginal","defragImage","setDefrag","onImageSelected","files","imageFile","original","undefined","className","onChange","alt","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.428fec33.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst readImageFileToBase64 = async (file: File): Promise<string> => {\n  if (!file.type.match('image.*')) {\n    throw new Error(`\"${file.type}\" is not an image`);\n  }\n\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  return new Promise((resolve, reject) => {\n    reader.onload = (event: ProgressEvent<FileReader>) => {\n      resolve(event.target!.result as string);\n    }\n\n    reader.onerror = reject;\n    reader.onabort = reject;\n  });\n}\n\nconst loadImage = async (src: string): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.onload = () => resolve(image);\n    image.onerror = reject;\n    image.src = src;\n  })\n}\n\nconst base64ToImageData = async (base64Image: string): Promise<ImageData> => {\n  const image = await loadImage(base64Image);\n\n  const canvas = document.createElement('canvas');\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  const context = canvas.getContext('2d');\n  context!.drawImage(image, 0, 0);\n\n  return context!.getImageData(0, 0, image.width, image.height);\n}\n\nconst imageDataToBase64 = (imageData: ImageData): string => {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n\n  if (!context) throw new Error(\"Couldn't get canvas context\");\n\n  canvas.width = imageData.width;\n  canvas.height = imageData.height;\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL()\n}\n\nconst defragmentImageData = (image: ImageData): ImageData => {\n  const rgba = image.data;\n  let pixels = [];\n\n  console.log(\"Extracting pixel data...\");\n  for (let index = 0; index < rgba.length - 3; index += 4) {\n    pixels.push([rgba[index], rgba[index+1], rgba[index+2], rgba[index+3]]);\n  }\n\n  console.log(\"Defragmenting pixels\");\n  pixels.sort((a, b) => {\n    const [ar, ag, ab, aa] = a;\n    const [br, bg, bb, ba] = b;\n\n    if (ar !== br) return ar - br;\n    if (ag !== bg) return ag - bg;\n    if (ab !== bb) return ab - bb;\n    if (aa !== ba) return aa - ba;\n\n    return 0;\n  });\n\n  console.log(\"Done!\");\n  const defragRgba = new Uint8ClampedArray(pixels.flat());\n  return new ImageData(defragRgba, image.width, image.height);\n}\n\nconst defragmentBase64 = async (base64Image: string): Promise<string> => {\n  const imageData = await base64ToImageData(base64Image);\n  const defrag = defragmentImageData(imageData);\n  return imageDataToBase64(defrag);\n\n}\n\nfunction App() {\n  const [originalImage, setOriginal] = useState<string>();\n  const [defragImage, setDefrag] = useState<string>();\n\n  const onImageSelected = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files) return;\n    const imageFile = event.target.files[0];\n\n    const original = await readImageFileToBase64(imageFile);\n    setOriginal(original);\n    setDefrag(undefined);\n\n    const defrag = await defragmentBase64(original);\n    setDefrag(defrag);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Image Defrag</h1>\n        <input type=\"file\" onChange={onImageSelected} />\n      </header>\n\n      {originalImage &&\n        <main>\n          <section>\n            <h2>Original</h2>\n            <img alt=\"original\" src={originalImage} />\n          </section>\n\n          <section>\n            {defragImage ? <h2>Defragmented</h2> : <h2>Defragmenting...</h2>}\n            {defragImage && <img alt=\"defragmented\" src={defragImage} />}\n          </section>\n        </main>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}