{"version":3,"sources":["defrag.ts","App.tsx","index.tsx"],"names":["readImageFileToBase64","file","a","type","match","Error","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","event","target","result","onerror","onabort","defragmentBase64","base64Image","base64ToImageData","imageData","defrag","defragmentImageData","imageDataToBase64","loadImage","src","image","Image","canvas","document","createElement","width","height","context","getContext","drawImage","getImageData","putImageData","toDataURL","rgba","data","pixels","console","log","index","length","push","sort","pixel1","pixel2","r1","g1","b1","a1","r2","g2","b2","a2","defragRgba","Uint8ClampedArray","flat","ImageData","App","useState","originalImage","setOriginal","defragImage","setDefrag","onImageSelected","files","imageFile","original","undefined","className","onChange","alt","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2fb9d311.chunk.js","sourcesContent":["export const readImageFileToBase64 = async (file: File): Promise<string> => {\n    if (!file.type.match('image.*')) {\n        throw new Error(`\"${file.type}\" is not an image`);\n    }\n\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    return new Promise((resolve, reject) => {\n        reader.onload = (event: ProgressEvent<FileReader>) => {\n            resolve(event.target!.result as string);\n        }\n\n        reader.onerror = reject;\n        reader.onabort = reject;\n    });\n}\n\nexport const defragmentBase64 = async (base64Image: string): Promise<string> => {\n    const imageData = await base64ToImageData(base64Image);\n    const defrag = defragmentImageData(imageData);\n    return imageDataToBase64(defrag);\n}\n\nconst loadImage = async (src: string): Promise<HTMLImageElement> => {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => resolve(image);\n        image.onerror = reject;\n        image.src = src;\n    })\n}\n\nconst base64ToImageData = async (base64Image: string): Promise<ImageData> => {\n    const image = await loadImage(base64Image);\n\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    const context = canvas.getContext('2d');\n    context!.drawImage(image, 0, 0);\n\n    return context!.getImageData(0, 0, image.width, image.height);\n}\n\nconst imageDataToBase64 = (imageData: ImageData): string => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    if (!context) throw new Error(\"Couldn't get canvas context\");\n\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    context.putImageData(imageData, 0, 0);\n    return canvas.toDataURL();\n}\n\nconst defragmentImageData = (image: ImageData): ImageData => {\n    const rgba = image.data;\n    let pixels = [];\n\n    console.log(\"Extracting pixel data...\");\n    for (let index = 0; index <= rgba.length - 4; index += 4) {\n        pixels.push([\n            rgba[index],\n            rgba[index + 1],\n            rgba[index + 2],\n            rgba[index + 3]\n        ]);\n    }\n\n    console.log(\"Defragmenting pixels\");\n    pixels.sort((pixel1, pixel2) => {\n        const [r1, g1, b1, a1] = pixel1;\n        const [r2, g2, b2, a2] = pixel2;\n\n        if (r1 !== r2) return r1 - r2;\n        if (g1 !== g2) return g1 - g2;\n        if (b1 !== b2) return b1 - b2;\n        if (a1 !== a2) return a1 - a2;\n\n        return 0;\n    });\n\n    console.log(\"Done!\");\n    const defragRgba = new Uint8ClampedArray(pixels.flat());\n    return new ImageData(defragRgba, image.width, image.height);\n}\n","import React, {useState} from 'react';\nimport {readImageFileToBase64, defragmentBase64} from './defrag';\nimport './App.css';\n\nfunction App() {\n  const [originalImage, setOriginal] = useState<string>();\n  const [defragImage, setDefrag] = useState<string>();\n\n  const onImageSelected = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files) return;\n    const imageFile = event.target.files[0];\n\n    const original = await readImageFileToBase64(imageFile);\n    setOriginal(original);\n    setDefrag(undefined);\n\n    const defrag = await defragmentBase64(original);\n    setDefrag(defrag);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Image Defrag</h1>\n        <input type=\"file\" onChange={onImageSelected} />\n      </header>\n\n      {originalImage &&\n        <main>\n          <section>\n            <h2>Original</h2>\n            <img alt=\"original\" src={originalImage} />\n          </section>\n\n          <section>\n            {defragImage ? <h2>Defragmented</h2> : <h2>Defragmenting...</h2>}\n            {defragImage && <img alt=\"defragmented\" src={defragImage} />}\n          </section>\n        </main>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}