{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["readImageFileToBase64","file","a","type","match","Error","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","event","target","result","onerror","onabort","loadImage","src","image","Image","base64ToImageData","base64Image","canvas","document","createElement","width","height","context","getContext","drawImage","getImageData","imageDataToBase64","imageData","putImageData","toDataURL","defragmentImageData","rgba","data","pixels","index","length","push","sort","b","reduce","x","y","newRgba","Uint8ClampedArray","flat","console","log","ImageData","defragmentBase64","defrag","App","useState","originalImage","setOriginal","defragImage","setDefrag","onImageSelected","files","imageFile","original","className","onChange","alt","style","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1672ca7.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst readImageFileToBase64 = async (file: File): Promise<string> => {\n  if (!file.type.match('image.*')) {\n    throw new Error(`\"${file.type}\" is not an image`);\n  }\n\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  return new Promise((resolve, reject) => {\n    reader.onload = (event: ProgressEvent<FileReader>) => {\n      resolve(event.target!.result as string);\n    }\n\n    reader.onerror = reject;\n    reader.onabort = reject;\n  });\n}\n\nconst loadImage = async (src: string): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.onload = () => resolve(image);\n    image.onerror = reject;\n    image.src = src;\n  })\n}\n\nconst base64ToImageData = async (base64Image: string): Promise<ImageData> => {\n  const image = await loadImage(base64Image);\n\n  const canvas = document.createElement('canvas');\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  const context = canvas.getContext('2d');\n  context!.drawImage(image, 0, 0);\n\n  return context!.getImageData(0, 0, image.width, image.height);\n}\n\nconst imageDataToBase64 = (imageData: ImageData): string => {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n\n  if (!context) throw new Error(\"Couldn't get canvas context\");\n\n  canvas.width = imageData.width;\n  canvas.height = imageData.height;\n  context.putImageData(imageData, 0, 0);\n  return canvas.toDataURL()\n}\n\nconst defragmentImageData = (image: ImageData): ImageData => {\n  const rgba = image.data;\n  let pixels = [];\n\n  // Split out rgba pixels\n  for (let index = 0; index < rgba.length - 3; index += 4) {\n    pixels.push([rgba[index], rgba[index+1], rgba[index+2], rgba[index+3]]);\n  }\n\n  pixels.sort((a, b) => {\n    if (a === b) return 0;\n\n    const aSum = a.reduce((x, y) => x + y, 0);\n    const bSum = b.reduce((x, y) => x + y, 0);\n\n    return aSum - bSum;\n  })\n\n\n  const newRgba = new Uint8ClampedArray(pixels.flat());\n  console.log(rgba)\n  console.log(newRgba);\n  return new ImageData(newRgba, image.width, image.height);\n}\n\nconst defragmentBase64 = async (base64Image: string): Promise<string> => {\n  const imageData = await base64ToImageData(base64Image);\n  const defrag = defragmentImageData(imageData);\n  return imageDataToBase64(defrag);\n\n}\n\nfunction App() {\n  const [originalImage, setOriginal] = useState<string>();\n  const [defragImage, setDefrag] = useState<string>();\n\n  const onImageSelected = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files) return;\n    const imageFile = event.target.files[0];\n\n    const original = await readImageFileToBase64(imageFile);\n    setOriginal(original);\n\n    const defrag = await defragmentBase64(original);\n    setDefrag(defrag);\n  }\n\n  return (\n    <div className=\"App\">\n      <input type=\"file\" onChange={onImageSelected} />\n      { originalImage && <img alt=\"original\" src={originalImage} style={{ width: \"100%\" }} />}\n      {defragImage && <img alt=\"defragmented\" src={defragImage} style={{ width: \"100%\" }} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}